package com.mobile.prm392.services;

import com.google.genai.Client;
import com.google.genai.types.GenerateContentResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AIService {
    private final Client client;

    private static final int MAX_RETRIES = 3;
    private static final long RETRY_DELAY_MS = 2000; // 2s

    // Chat healing
    public String askAI(String prompt) {
        GenerateContentResponse response =
                client.models.generateContent(
                        "gemini-2.5-flash",
                        """
                                You are HEALINK, an empathetic emotional companion AI.
                                You act like a gentle, understanding friend who truly listens,
                                while also being an emotional intelligence expert who helps users
                                heal, reflect, and rediscover peace and self-worth.
                                
                                Your tone is warm, kind, and soulful ‚Äî every message feels human, genuine,
                                and comforting. You never sound robotic or detached.
                                
                                üíñ Guidelines:
                                
                                Speak concisely but with emotional depth.
                                Acknowledge the user's feelings before offering any gentle insight.
                                
                                Use soothing, compassionate language.
                                You may share short reflective thoughts, metaphors, or mindfulness insights.
                                Never give medical or diagnostic advice.
                                End messages with a note of hope or calm when appropriate.
                                
                                Example style:
                                User: I feel lost and tired lately.
                                AURA: I hear how heavy that must feel. Sometimes, when life quiets down,
                                the silence can sound like loneliness ‚Äî but it‚Äôs also space for healing.
                                You‚Äôre doing better than you think. üåô                    User: """ + prompt,
                        null);
        return response.text();
    }

    // Flashcard motivational quote
    public String generateFlashcard() {
        GenerateContentResponse response =
                client.models.generateContent(
                        "gemini-2.5-flash",
//                        "Generate one short motivational or healing quote for a flashcard. " +
//                                "Keep it concise, uplifting, and suitable to display on a card. " +
//                                "Do not add explanations, only return the quote text.",

                        "H√£y t·∫°o ra m·ªôt c√¢u chuy·ªán ng·∫Øn g·ªçn, truy·ªÅn ƒë·ªông l·ª±c b·∫±ng ti·∫øng Vi·ªát c·ª° 3 d√≤ng.  \n" +
                                "C√¢u chuy·ªán n√™n n√≥i v·ªÅ h√†nh tr√¨nh v∆∞·ª£t qua kh√≥ khƒÉn, ki√™n tr√¨, ho·∫∑c t√¨m l·∫°i √Ω nghƒ©a cu·ªôc s·ªëng.  \n" +
                                "Cu·ªëi c√πng, h√£y th√™m m·ªôt c√¢u n√≥i hay, s√¢u s·∫Øc c·ªßa m·ªôt ng∆∞·ªùi t·ª´ng tr·∫£i (c√≥ th·ªÉ l√† tr√≠ch d·∫´n th·ª±c t·∫ø ho·∫∑c phong c√°ch t∆∞∆°ng t·ª± 1 c√¢u ng·∫Øn ).  \n" +
                                "Gi·ªØ gi·ªçng vƒÉn ·∫•m √°p, kh√≠ch l·ªá v√† ph√π h·ª£p ƒë·ªÉ hi·ªÉn th·ªã tr√™n flashcard truy·ªÅn c·∫£m h·ª©ng.  \n" +
                                "Ch·ªâ tr·∫£ v·ªÅ ph·∫ßn c√¢u chuy·ªán v√† c√¢u n√≥i, kh√¥ng gi·∫£i th√≠ch th√™m.",

                        null);
        return response.text();
    }

    // Common retry logic
    private String callGeminiWithRetry(String prompt) {
        int attempt = 0;
        while (attempt < MAX_RETRIES) {
            try {
                GenerateContentResponse response = client.models.generateContent(
                        "gemini-2.5-flash",
                        prompt,
                        null);
                return response.text();
            } catch (Exception e) {
                attempt++;
                if (attempt >= MAX_RETRIES) {
                    throw new RuntimeException("Gemini API ƒëang qu√° t·∫£i ho·∫∑c kh√¥ng ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.", e);
                }
                try {
                    Thread.sleep(RETRY_DELAY_MS); // ch·ªù 2s tr∆∞·ªõc khi retry
                } catch (InterruptedException ignored) {
                }
            }
        }
        throw new RuntimeException("Gemini API failed after retries.");
    }
}
